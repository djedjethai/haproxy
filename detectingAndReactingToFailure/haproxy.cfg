global
	log 127.0.0.1 local0
	log 127.0.0.1 local1 notice
	maxconn 4096
	description Our awesome HAProxy Stats page # that is going with show-legends

defaults
	mode http
	log global
	option dontlognull
	timeout connect 5s
	timeout client 60s
	timeout server 60s
	errorfile 400 /usr/local/etc/haproxy/errors/400.http
	errorfile 403 /usr/local/etc/haproxy/errors/403.http
	errorfile 408 /usr/local/etc/haproxy/errors/408.http
	errorfile 500 /usr/local/etc/haproxy/errors/500.http
	errorfile 502 /usr/local/etc/haproxy/errors/502.http
	errorfile 503 /usr/local/etc/haproxy/errors/503.http
	errorfile 504 /usr/local/etc/haproxy/errors/504.http

listen  stats
    	bind *:1936
    	mode http
    	stats enable
    	stats refresh 30s # refresh the page
    	stats auth admin:password # set the auth(if not, no auth)
    	stats hide-version
    	stats realm Haproxy\ Statistics
    	stats uri /
	stats show-desc # this allow to show the description in the global directives
	stats show-legends # for the UI to show the legends
	stats admin if TRUE # allow the servers' administration from the UI
    	# bind *:9000 ssl crt /etc/ssl/certs/mycert.pem # with ssl


frontend myfrontend
	bind *:80
  	default_backend mybackend
	acl srv_down nbsrv(mybackend) lt 1
	use_backend backupbackend if srv_down

# the option(as it fail) will set this srv as down
# then from the frontend directive it will redirect on backupbackend	
backend mybackend
  	server web1 web1:80 check
  	option httpchk GET /test

backend backupbackend
  	server web2 web2:80 check


# ====== test HTTP server ========
# backend mysql_database
# 	# mode tcp
# 	balance roundrobin
# 	# server web1 web1:80 check fall 3 inter 2m observe layer4 error-limit 1 # ok for tcp
# 	server web1 web1:80 check fall 3 inter 2m observe layer7 error-limit 1
# 	# in case of failure of server web1 this server web2 take over
# 	server web2 web2:80 check backup

# if less than 2 server the req will target the backup server
# frontend mywebsite 
# 	bind *:80
# 	acl less_than_two nbsrv(primaryservers) lt 2
# 	use_backend backupservers if less_than_two
# 	default_backend primaryservers
# 
# backend primaryservers
# 	balance roundrobin
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 	
# backend backupservers
# 	balance roundrobin
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check


# setting a backup server
# backend servers
# 	server web1 web1:80 check 
# 	server web2 web2:80 check backup 

# set a few backup servers which will work together to replace the main(crashed) one
# Note that the backups won't be activated until all of the regular servers fail.
# backend servers
# 	server unknow 127.0.0.1:3000 check
# 	server another 127.0.0.1:4000 check
# 	server web1 web1:80 check backup
# 	server web2 web2:80 check backup
# 	option allbackups
	
# rely on the status of another service
# frontend mysite
# 	bind *:80
# 	acl is_dbup srv_is_up(database/web2)
# 	use_backend reservation_service if is_dbup
# 	default_backend defserver 
# 
# backend reservation_service
# 	mode http
# 	server web1 127.0.0.1:80 track database/web2     
# 
# backend database
# 	mode tcp
# 	server web2 127.0.0.1:80 check # imagine it is a db 
# 
# backend defserver
# 	server web1 120.0.0.1:80 check # imagine it's a default server



# backend servers
# 	balance roundrobin
# 	server web1 web1:80 check inter 5s fall 2 rise 3
# 	server web2 web2:80 check inter 5s fall 2 rise 3
# 	option httpchk HEAD /test 
# 	option httpchk HEAD /
# 
# backend reservation_service
# 	mode http
# 	server web1 127.0.0.1:80 track database/web2     
# 
# backend database
# 	mode tcp
# 	server web2 127.0.0.1:80 check # imagine it is a db 
	

# expect http response status to be 200 or whatever else
# backend servers
# 	balance roundrobin
# 	server web1 web1:80 check inter 5s fall 2 rise 3
# 	server web2 web2:80 check inter 5s fall 2 rise 3
# 	option httpchk GET /test 
# 	option httpchk GET /
# 	http-check expect rstring Web # check page content, if Web is present ok
# 	# option httpchk HEAD /test # check the header
# 	# option httpchk HEAD /
# 	# http-check expect rstatus ^2(\d){2}$ # allow any 2xx response codes
# 	# http-check expect status 200

# test (/test and /)
# check the server each 5s only twice fail and set it as unavailable a 3 ok check as available
# backend servers
# 	balance roundrobin
# 	server web1 web1:80 check inter 5s fall 2 rise 3
# 	server web2 web2:80 check inter 5s fall 2 rise 3
# 	# option httpchk HEAD /test
# 	option httpchk HEAD /test HTTP/1.1\r\nHost:\ localhost
# 	# option httpchk HEAD /test HTTP/1.1\r\nHost:\ mywebsite.com
# 	option httpchk HEAD /

# that won't work, making sure the first backend get hits


