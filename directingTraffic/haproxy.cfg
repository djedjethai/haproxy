global
	log 127.0.0.1 local0
	log 127.0.0.1 local1 notice
	maxconn 4096
	description Our awesome HAProxy Stats page # that is going with show-legends

defaults
	mode http
	log global
	option dontlognull
	timeout connect 5s
	timeout client 60s
	timeout server 60s
	errorfile 400 /usr/local/etc/haproxy/errors/400.http
	errorfile 403 /usr/local/etc/haproxy/errors/403.http
	errorfile 408 /usr/local/etc/haproxy/errors/408.http
	errorfile 500 /usr/local/etc/haproxy/errors/500.http
	errorfile 502 /usr/local/etc/haproxy/errors/502.http
	errorfile 503 /usr/local/etc/haproxy/errors/503.http
	errorfile 504 /usr/local/etc/haproxy/errors/504.http

listen  stats
    	bind *:1936
    	mode http
    	stats enable
    	stats refresh 30s # refresh the page
    	stats auth admin:password # set the auth(if not, no auth)
    	stats hide-version
    	stats realm Haproxy\ Statistics
    	stats uri /
	stats show-desc # this allow to show the description in the global directives
	stats show-legends # for the UI to show the legends
	stats admin if TRUE # allow the servers' administration from the UI
    	# bind *:9000 ssl crt /etc/ssl/certs/mycert.pem # with ssl

### =========== redirect to other url =========
frontend mywebsite 
	bind *:80 
	default_backend webservers 
	acl wantsprettygoodshoes req.hdr(Host) -i -m str prettygoodshoes.com 
	redirect prefix http://amazingshoes.com if wantsprettygoodshoes

### =========== switching on HTTP header =========
# frontend mywebsite
# 	bind *:80
# 	acl ismobile req.hdr(User-agent) -i -m reg (android|iphone)
# 	use_backend mobileservers if ismobile
# 	default_backend defaultbackend

backend mobileservers
	server web1 web1:80 check
	server web2 web2:80 check

# that won't work, making sure the first backend get hits
backend defaultbackend
	server web1 127.0.0.1:80 check
	server web2 127.0.0.1:80 check
	
### ======= url_parameter ========
# frontend mywebsite
# 	bind *:80
# 	acl is_test url_param(region) -i -m reg .+  # will match any parameter values: ?region=northeR (!regex is inefficient..)
# 	# acl is_test url_param(region) -i -m str west est north # if ?region=west or =est or =north
# 	# acl is_test url_param(region) -i -m str west # will path only if ?region=west
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check


# =========== multiple match ===========
# frontend mywebsite
# 	bind *:80
# 	acl old_test path_beg -i /test/v1
# 	acl new_test path_beg -i /test/v2
# 	use_backend oldservers if old_test
# 	use_backend newservers if new_test
# 	default_backend webservers
# 
# backend oldservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend newservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check

# =========== path regex !!! regex should not be use, resources consumer ===========
# frontend mywebsite
# 	bind *:80
# 	acl is_test path_reg -i ^\/test\/*
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check

# =========== path length comparaison ===========
# frontend mywebsite
# 	bind *:80
# 	acl is_test path_len lt 8
# 	# acl is_test path_len gt 4 
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check

# =========== path length ===========
# frontend mywebsite
# 	bind *:80
# 	acl is_test path_len 6 # /test/ == 6
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check

# =========== url ends ===========
# frontend mywebsite
# 	bind *:80
# 	acl is_test path_end -i /test/ # could also have been: path_end -i .jpg .png  
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check

# =========== subdirectory ===========
# frontend mywebsite
# 	bind *:80
# 	acl is_test path_dir -i /test 
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check

# =========== exact url ===========
# frontend mywebsite
# 	bind *:80
# 	acl is_test path -i /test/ # !!! the last slash matters...
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check

#======= path_beg ========
# frontend mywebsite
# 	bind *:80
# 	acl is_test path_beg -i /test
# 	use_backend testservers if is_test
# 	default_backend webservers
# 
# backend testservers
# 	server web1 web1:80 check
# 	server web2 web2:80 check
# 
# backend webservers
# 	server web1 127.0.0.1:80 check
# 	server web2 127.0.0.1:80 check
# 


